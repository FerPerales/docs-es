goals do
  goal do 
    rawtext(md2html('Utiliza el comando `gets` para que se pueda obtener la entrada desde el usuario a tu programa'))
  end
  goal 'En algunas ocasiones puedes utilizar una sentencia condicional para ejecutar una parte de código de una branch.'
end

spanish_step do
  message 'Crea un nuevo archivo con el nombre de: conditionals_test.rb'
 spanish_type_in_file 'conditionals_test.rb', <<-'CONTENTS'
print "Cuántas manzanas tienes? > "
total_manzanas = gets.to_i
puts "Tu tienes #{total_manzanas} manzanas."
  CONTENTS
  spanish_console 'ruby conditionals_test.rb'
  message 'Cuando se te indique, introduce un número de manzanas y pulse ENTER.'
  message "`print` es como `puts` pero no crea una nueva línea después de la impresión."
  message "`gets`, **devuelve** un **s**tring, pausa tu programa y espera a que el usuario escriba algo y posteriormente presione la tecla Enter. Luego devuelve el valor hacia tu programa y continúa con la ejecución. Desde que el usuario podría tener escrito cualquier cosa ('plátano', '19.2', '<<!!@@') nosotros utilizamos to_i para garantizar que lo que aparece es de tipo entero. Si el usuario no escribe un tipo de entero válido, `to_i` retorna `0`."
end

spanish_step do
  message 'Continuando desde el final de conditionals_test.rb...'
  spanish_type_in_file 'conditionals_test.rb', <<-'CONTENTS'
if total_manzanas > 5
  puts "¡Hay un montón de manzanas!"
else
  puts 'No hay muchas manzanas...'
end
  CONTENTS
  spanish_console 'ruby conditionals_test.rb'
  message 'El `if ... else ... end` construct is a way of changing which lines of your program get executed depending on your data.'
  message 'Try running the program with different values for apple_count to see each side of the conditional get executed.'
end






















step do
  message 'What goes after the `if` is any expression that returns a **boolean**, (the values `true` or `false`). Here\'s some more expressions that return `true` or `false`:'
  irb <<-IRB
15 < 5
10 == 12
'foo' != 'bar'
  IRB
  irb <<-IRB
'sandwich'.end_with?('h')
'sandwich'.end_with?('z')
[1,2,3].include?(2)
[1,2,3].include?(9)
  IRB
  message 'Many methods return `true` or `false` as well. By convention, methods in Ruby that return booleans end with a question mark.'
end

step do
  message 'You can nest a conditional in a loop, as well.'
  message 'Create a new file called conditional_loops.rb'
  type_in_file 'conditional_loops.rb', <<-'CONTENTS'
fruits = ['apple', 'pear', 'apricot']
fruits.each do |fruit|
  if fruit.start_with?('a')
    puts "#{fruit} begins with the letter a."
  end
end
  CONTENTS
  console 'ruby conditional_loops.rb'
  message "Try changing this conditional so it only prints fruits with at least five letters in their name. Remember to change the string you're `puts`ing as well!"
end

step do
    message 'Create a new file called while_loop.rb'
    type_in_file 'while_loop.rb', <<-'CONTENTS'
total = 0
user_input = nil
while user_input != 'stop'
  print 'Enter a number to add to the total. > '
  user_input = gets.chomp
  total = total + user_input.to_i
end
puts "Your final total was #{total}!"
    CONTENTS
    console 'ruby while_loop.rb'
    message "A **while** loop continues repeating until a certain statement is false. Here, the program continually asks us for numbers until we say the string 'stop'."
    message "It's easy for a while loop to get out of control! If your loop body doesn't do anything to make the **while** condition false, your loop will run forever."
end

explanation do
  message "Without some kind of conditional, your program would do the same thing every time. Conditionals let you choose to do different things depending on what data you have in hand."
  message 'Now that you know *conditionals*, *loops*, *arrays*, *hashes* and *strings*, you can make some pretty complicated programs!'
end

next_step 'functions'