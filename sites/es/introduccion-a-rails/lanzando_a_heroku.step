h2 do
  span "Si todavía no has lanzado tu aplicación a Heroku, comienza con "
  a 'Configuración inicial', href: '#first-time'
  span ". De otra manera, empieza en "
  a 'Siempre hacer', href: '#every-time'
  span "."
end

a name: 'first-time'
situation "Configuración inicial" do
  step "Crea una aplicación heroku" do
    console "heroku create"
    message "`heroku create` registra una nueva aplicación en heroku. Al hacer esto deberías ver algunas líneas de salida, incluyendo la URL de tu nueva aplicación."
  end

  step "Edita el Gemfile" do
    important "Cada aplicación tiene su propio `Gemfile`. Asegúrate de que estás abriendo el que corresponde a la carpeta de tu aplicación."

    message "Heroku ejecutará nuestra aplicación un poco diferente a como lo hace nuestra computadora, por lo cual requiere que hagamos uns pequeños cambios a nuestro `Gemfile`."

    message "Abre el archivo llamado `Gemfile` en Sublime Text, o tu editor preferido, y encuentra el siguiente bloque:"

    source_code :ruby, <<-RUBY
gem 'sqlite3'
    RUBY

    message "**Elimina ese bloque** y reemplázalo con:"

    source_code :ruby, <<-RUBY
group :development, :test do
  gem 'sqlite3'
end

group :production do
  gem 'pg'
  gem 'rails_12factor'
end
    RUBY
  end

  step "Procesa los cambios del Gemfile" do
    console "bundle install --without production"
    message "Cada vez que el Gemfile cambia, necesitas ejecutar ``bundle install`` para que los cambios sean procesados. La versión procesada de los cambios es almacenada en otro archivo llamado ``Gemfile.lock``."
  end

  step "Aplica los cambios del Gemfile" do
    message "Ahora hay cambios en el Gemfile y Gemfile.lock que necesitan ser aplicados antes de que podamos enviarlos a heroku."
    console <<-SHELL
git add .
git commit -m "Gemfile modificado para heroku"
    SHELL
    tip "Hay un punto despues de la palabra add en la primera línea."
  end
end

a name: 'every-time'
situation "Every time" do
  step "Aplica todos los cambios pendientes a git" do
    message "Heroku sólo recibirá los archivos a los que se les ha aplicado commit dentro de nuestro repositorio  local git. Por ello necesitamos asegurarnos de que todos los cambios en los archivos han sido aplicados mediante el comando commit."
    console "git status"
    message "`git status` muestra todos los cambios pendientes. If it has no output, you're already ready to deploy! Otherwise..."

    console <<-SHELL
git add .
git commit -m "Some helpful message for your future self"
    SHELL
    message "Your commit message should reference whatever your outstanding changes are: something like 'added votes to the topics index'."
  end

  step "Push changes to heroku" do
    console "git push heroku master"
    message "This takes all changes you've committed locally and pushes them to heroku."
  end

  step "Run database migrations on Heroku" do
    console "heroku run rake db:migrate"
    message "This tells Heroku to run your migrations on its database, like running rake db:migrate locally. Heroku's database is separate from the one on your computer, which means it needs to be updated every time you make changes to the structure of your database.  It also means that you'll not see any of the data you entered into the sqlite3 database on your computer."
  end

  step "Visit your application" do
    console "heroku open"
    message "This opens the new application in your browser."
  end
end

explanation do
  message <<-MARKDOWN
  First, we had to do some work to make Heroku happy with our application. This required updating the Gemfile and bundling.

  * The Gemfile is a list of all the Ruby libraries your application needs.
    What we've declared here is that we want to use the `sqlite3` library
    while we're developing on our computer (the development group) but when
    deploying to heroku (the production group) we want to use the `pg` library,
    which is made for the type of database that heroku uses.

  * Bundler is how Ruby projects keep track of the gems that they use. We told
    bundler what we wanted to use in the `Gemfile`, now we need to make sure those
    gems are installed. Since we don't have the type of database heroku does, we
    skip the production gems. Don't worry though! Bundler still logs them so
    Heroku will install them when they get your code.
  MARKDOWN

  message "You should be able to deploy your application any time it's in a good, working state. Your typical workflow will look like:"
  img src: "img/workflow.png", alt: "workflow", style: "border: none"
  ol do
    li { message "Add or change some code" }
    li { message "Commit your changes (`git commit`)" }
    li { message "(repeat)" }
  end
  message "Any time your changes are committed, you should feel free to `git push heroku master` and boom! Your changes are live!"
end
