goals do
  goal "Crear un repositorio local de Git"
  goal "Agregar todos nuestros archivos al repositorio de Git"

  message "Con el fin de publicar nuestro trabajo, se necesita agregar nuestra aplicación y cualquier cambio que se haga a un \"Sistema de control de versiones\". En nuestro caso vamos a utilizar *Git* porque es (relativamente) fácil y es lo que nuestra aplicación servidor, *Heroku*, utiliza."
end

steps do

  step do
    console "git init"

    message "Realmente no parece que algo haya pasado, pero 'git init' inicializó el repositorio (repo) en un directorio oculto llamado `.git`. Puedes verlo escribiendo `ls -a` (lista todos los archivos)."
  end

  step do
    console "git status"

  message "`git status` te dice todo lo que se ha modificado, nuevo o faltante."
  message "La primer vez que ejecutes esto, deberás ver muchos cambios."
  message "La segunda vez que lo ejecutes, no deberás ver tanto."
  end

  step do
    console "git add ."
    message "`git add .` le dice a Git que quieres agregar al repositorio, el directorio actual (`.`) y todo lo que hay."
    tip "git add" do
      message <<-MARKDOWN
        Con Git, normalmente hay muchas maneras de hacer cosas similares.

        * `git add foo.txt` agrega un archivo llamado `foo.txt`
        * `git add .` agrega todos los archivos nuevos y cambios en archivos, pero *mantiene* los archivos que has eliminado
        * `git add -A` agrega todo, incluyendo archivos eliminados.

        "Agregar archivos eliminados" puede sonar raro, pero si piensas en un sistema de control de versiones para mantener
        el historial de *cambios*, puede tener más sentido. La mayoría de la gente usa `git add .` pero `git add -A`
        puede ser más seguro. No importa como sea, `git status` es tu amigo.
      MARKDOWN
    end
  end

  step do
    console "git commit -m \"Todas las cosas agregadas\""
    message "`git commit` le dice a Git que realmente _haga_ todas las cosas que has dicho que querías hacer."
    message "Esto está hecho en dos pasos así que puedes agrupar múltiples cambios juntos."
    message "`-m \"Todas las cosas agregadas\"` es sólo un atajo para decir cuál es el mensaje de tu commit. Puedes saltar esa parte y Git te mostrará un editor para agregar un mensaje más detallado."
  end
end

explanation do
  message <<-MARKDOWN
Registrando tu aplicación en Git, estás creando un historial de tu punto de partida. Todas las veces que hagas un cambio durante el taller de hoy, lo agregaremos a Git antes de seguir. De esta manera, si algo se rompe, o haces un cambio que no te gusta, puedes usar Git como un todo-poderoso "deshacer". ¡Pero eso sólo funciona cuando recuerdas hacer commit pronto y a menudo!
  MARKDOWN
end

next_step "ejecutando_la_aplicacion_localmente"
